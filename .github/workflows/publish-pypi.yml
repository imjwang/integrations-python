name: Publish Python packages to PyPI

on:
  push:
    branches:
      - main
    paths:
      - 'integrations-python/*/pyproject.toml'

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Get package directories with version changes
      id: set-matrix
      run: |
        # Define the list of publishable packages
        PUBLISHABLE_PACKAGES=("openai" "toolhouse" "gemini")
        
        packages=()
        for pkg in "${PUBLISHABLE_PACKAGES[@]}"; do
          if [ ! -d "integrations-python/$pkg" ]; then
            continue
          fi
          
          # Check if pyproject.toml has changed
          if git diff --quiet HEAD^ HEAD -- "integrations-python/$pkg/pyproject.toml"; then
            continue
          fi
          
          # Check if the version line specifically has changed
          if ! git diff HEAD^ HEAD -- "integrations-python/$pkg/pyproject.toml" | grep -q '^+version[[:space:]]*=[[:space:]]*'; then
            continue
          fi
          
          packages+=("\"$pkg\"")
        done
        
        # Ensure we output a valid JSON array even if empty
        if [ ${#packages[@]} -eq 0 ]; then
          echo "matrix={\"package\":[]}" >> $GITHUB_OUTPUT
        else
          echo "matrix={\"package\":[${packages[*]}]}" >> $GITHUB_OUTPUT
        fi

  publish:
    needs: check-changes
    runs-on: ubuntu-latest
    if: ${{ fromJson(needs.check-changes.outputs.matrix).package[0] }}
    strategy:
      matrix: ${{ fromJson(needs.check-changes.outputs.matrix) }}
      fail-fast: false
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -

    - name: Configure Poetry
      run: |
        poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}

    - name: Check if version exists on PyPI
      id: version_check
      run: |
        cd integrations-python/${{ matrix.package }}
        PACKAGE_NAME=$(poetry version | cut -d' ' -f1)
        CURRENT_VERSION=$(poetry version -s)
        if poetry run python -m pip install $PACKAGE_NAME==$CURRENT_VERSION 2>/dev/null; then
          echo "Version $CURRENT_VERSION already exists on PyPI. Skipping publish."
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "Version $CURRENT_VERSION does not exist on PyPI. Proceeding with publish."
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Build and publish
      if: steps.version_check.outputs.exists != 'true'
      run: |
        cd integrations-python/${{ matrix.package }}
        poetry build
        poetry publish